<?xml version="1.0" encoding="GBK"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
	<!-- 定义数据源Bean，使用C3P0数据源实现，并注入数据源的必要信息 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close" p:driverClass="com.mysql.jdbc.Driver"
		p:jdbcUrl="jdbc:mysql://localhost:3306/department_sys?useUnicode=true&amp;characterEncoding=UTF-8"
		p:user="root" p:password="123456" p:maxPoolSize="40" p:minPoolSize="2"
		p:initialPoolSize="2" p:maxIdleTime="30" />
	<!-- 定义Hibernate的SessionFactory，SessionFactory需要依赖数据源，注入dataSource -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource">
		<!-- annotatedClasses用来列出全部持久化类 -->
		<property name="annotatedClasses">
			<list>
				<!-- 以下用来列出所有的PO类 -->
				<value>domain.Student</value>
				<value>domain._File</value>
				<value>domain.Bedroom</value>
				<value>domain.Building</value>
				<value>domain.Campus</value>
				<value>domain.HouseMaster</value>
				<value>domain.Mainstenance</value>
				<value>domain.Meter</value>
				<value>domain.Notice</value>
				<value>domain.Repair</value>
				<value>domain.SysManager</value>
				<value>domain.Type</value>
			</list>
		</property>
		<!-- 定义Hibernate SessionFactory的属性 -->
		<property name="hibernateProperties">
			<props>
				<!-- 指定Hibernate的连接方言 -->
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQL5InnoDBDialect
				</prop>
				<!--是否根据Hiberante映射创建数据表 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
			</props>
		</property>
	</bean>
	<!-- 定义Service组件，并将DAO组件注入Service组件 -->
	<bean id="commonService" class="service.impl.CommonServiceImpl"
		p:fileDao-ref="fileDao" p:noticeDao-ref="noticeDao" p:typeDao-ref="typeDao"
		p:campusDao-ref="campusDao" p:buildingDao-ref="buildingDao"
		p:bedroomDao-ref="bedroomDao" />

	<bean id="mainstService" class="service.impl.MainstServiceImpl"
		p:mainstDao-ref="mainstDao" p:repairDao-ref="repairDao" />

	<bean id="managerService" class="service.impl.ManagerServiceImpl"
		p:managerDao-ref="managerDao" p:noticeDao-ref="noticeDao"
		p:fileDao-ref="fileDao" />

	<bean id="masterService" class="service.impl.MasterServiceImpl"
		p:stuDao-ref="stuDao" p:bedroomDao-ref="bedroomDao" p:masterDao-ref="masterDao" />

	<bean id="studentService" class="service.impl.StudentServiceImpl"
		p:stuDao-ref="stuDao" p:repairDao-ref="repairDao" p:meterDao-ref="meterDao" />


	<!-- 定义DAO组件，并将SessionFactory注入DAO组件 -->
	<bean id="daoTemplate" abstract="true" lazy-init="true"
		p:sessionFactory-ref="sessionFactory" />
	<bean id="fileDao" class="dao.impl.FileDaoImpl" parent="daoTemplate" />
	<bean id="noticeDao" class="dao.impl.NoticeDaoImpl" parent="daoTemplate" />
	<bean id="typeDao" class="dao.impl.TypeDaoImpl" parent="daoTemplate" />
	<bean id="campusDao" class="dao.impl.CampusDaoImpl" parent="daoTemplate" />
	<bean id="buildingDao" class="dao.impl.BuildingDaoImpl" parent="daoTemplate" />
	<bean id="bedroomDao" class="dao.impl.BedroomDaoImpl" parent="daoTemplate" />
	<bean id="mainstDao" class="dao.impl.MainstenanceDaoImpl" parent="daoTemplate" />
	<bean id="repairDao" class="dao.impl.RepairDaoImpl" parent="daoTemplate" />
	<bean id="managerDao" class="dao.impl.SysManagerDaoImpl" parent="daoTemplate" />
	<bean id="stuDao" class="dao.impl.StudentDaoImpl" parent="daoTemplate" />
	<bean id="masterDao" class="dao.impl.HouseMasterDaoImpl" parent="daoTemplate" />
	<bean id="meterDao" class="dao.impl.MeterDaoImpl" parent="daoTemplate" />

	<!-- 配置Hibernate的局部事务管理器，使用HibernateTransactionManager类 -->
	<!-- 该类是PlatformTransactionManager接口针对采用Hibernate的特定实现类 -->
	<!-- 配置HibernateTransactionManager需依赖注入SessionFactory -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory" />

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 用于配置详细的事务定义 -->
		<tx:attributes>
			<!-- 所有以'get'开头的方法是read-only的 -->
			<tx:method name="get*" read-only="true" />
			<!-- 其他方法使用默认的事务设置，指定超时时长为5秒 -->
			<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" />
		</tx:attributes>
	</tx:advice>
	<!-- AOP配置的元素 -->
	<aop:config>
		<!-- 配置一个切入点 -->
		<aop:pointcut id="myPointcut" expression="execution(* service.impl.*.*(..))" />
		<!-- 指定在myPointcut切入点应用txAdvice事务增强处理 -->
		<aop:advisor pointcut-ref="myPointcut" advice-ref="txAdvice" />

	</aop:config>

</beans>
